initSidebarItems({"enum":[["AbstractLocation","An abstract location describes how to find the value of a variable in memory at a given time."],["AbstractMemoryLocation","An abstract memory location is either an offset from the given location, where the actual value can be found, or an offset to a pointer to another memory location, where the value can be found by (recursively) following the embedded `target` memory location."],["BitvectorDomain","The `BitvectorDomain` is a simple abstract domain describing a bitvector of known length."],["DataDomain","An abstract domain representing either a pointer or a non-pointer value. Both non-pointer values and offsets of pointers are represented by the same abstract domain `T`."]],"struct":[["AbstractIdentifier","An abstract identifier is used to identify an object or a value in an abstract state."],["AbstractIdentifierData","The data contained in an abstract identifier"],["Interval","A strided interval of values with a fixed byte size."],["IntervalDomain","An abstract domain representing values in an interval range with strides and widening hints."],["MemRegion","A memory region is an abstract domain representing a continuous region of memory, e.g. the stack frame of a function."],["MemRegionData","The internal data of a memory region. See the description of `MemRegion` for more."],["PointerDomain","An abstract value representing a pointer given as a map from an abstract identifier to the offset in the pointed to object. The offset itself is also a member of an abstract domain."]],"trait":[["AbstractDomain","The main trait describing an abstract domain."],["HasTop","An abstract domain implementing this trait has a global maximum, i.e. a Top element."],["RegisterDomain","A trait for abstract domains that can represent values loaded into CPU register."],["SizedDomain","A trait for types representing values with a fixed size (in bytes)."],["SpecializeByConditional","A trait for domains whose values can be restricted by knowing the result of a comparison of it with a known bitvector. The comparison may also be used to add widening hints to the domain."],["TryToBitvec","A conversion trait for abstract domains that can represent register values."],["TryToInterval","A conversion trait for abstract domains that can represent register values."]]});