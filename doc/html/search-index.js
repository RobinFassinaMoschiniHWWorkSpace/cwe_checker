var searchIndex = JSON.parse('{\
"acceptance_tests_ghidra":{"doc":"This crate contains acceptance tests using Ghidra as a …","t":[17,17,3,17,17,5,11,11,11,11,5,5,5,5,5,5,11,11,11,11,5],"n":["ARCHITECTURES","COMPILERS","CweTestCase","WINDOWS_ARCHITECTURES","WINDOWS_COMPILERS","all_test_cases","borrow","borrow_mut","from","into","linux_test_cases","mark_architecture_skipped","mark_compiler_skipped","mark_skipped","new_test_cases","print_errors","run_test","try_from","try_into","type_id","windows_test_cases"],"q":["acceptance_tests_ghidra","","","","","","","","","","","","","","","","","","","",""],"d":["CPU architectures contained in the test samples","Compilers contained in the test samples","A test case containing the necessary information to run …","CPU architectures for the Windows-based test samples","Compilers used for the Windows-based test samples","Return a list of all possible test cases (Linux and …","","","","","Return a list with all possible Linux test cases for the …","Mark test cases using the given CPU architecture as …","Mark test cases using the given compiler as <code>skipped</code>.","Mark test cases using the given CPU architecture + …","Generate test cases for all combinations of CPU …","Print the error messages of failed checks. The <code>error_log</code> …","Run the test case and print to the shell, whether the …","","","","Return a list with all possible Windows test cases for …"],"i":[0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0],"f":[null,null,null,null,null,[[["str",15]],[["vec",3],["cwetestcase",3]]],[[]],[[]],[[]],[[]],[[["str",15]],[["vec",3],["cwetestcase",3]]],[[["vec",3],["str",15]]],[[["vec",3],["str",15]]],[[["vec",3],["str",15]]],[[["str",15]],[["vec",3],["cwetestcase",3]]],[[["vec",3]]],[[["usize",15],["str",15]],[["string",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]],[["vec",3],["cwetestcase",3]]]],"p":[[3,"CweTestCase"]]},\
"cwe_checker":{"doc":"This crate defines the command line interface for the …","t":[3,11,12,11,11,5,11,12,12,5,11,11,11,5,11,11,12,5,12,12,12,12,5,11,11,11],"n":["CmdlineArgs","augment_clap","binary","borrow","borrow_mut","check_file_existence","clap","config","debug","filter_modules_for_partial_run","fmt","from","from_clap","get_project_from_ghidra","into","is_subcommand","json","main","module_versions","out","partial","quiet","run_with_ghidra","try_from","try_into","type_id"],"q":["cwe_checker","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Find vulnerable patterns in binary executables","","The path to the binary.","","","Check the existence of a file","","Path to a custom configuration file to use instead of the …","Output for debugging purposes. The current behavior of …","Only keep the modules specified by the <code>--partial</code> …","","","","Execute the <code>p_code_extractor</code> plugin in ghidra and parse …","","","Generate JSON output.","","Prints out the version numbers of all known modules.","Write the results to a file instead of stdout. This only …","Specify a specific set of checks to be run as a comma …","Do not print log messages. This prevents polluting stdout …","Run the cwe_checker with Ghidra as its backend.","","",""],"i":[0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1],"f":[null,[[["app",3]],["app",3]],null,[[]],[[]],[[["string",3]],[["result",4],["string",3]]],[[],["app",3]],null,null,[[["vec",3],["str",15]]],[[["formatter",3]],["result",6]],[[]],[[["argmatches",3]]],[[["path",3]]],[[]],[[],["bool",15]],null,[[]],null,null,null,null,[[["cmdlineargs",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"CmdlineArgs"]]},\
"cwe_checker_lib":{"doc":"The main library of the cwe_checker containing all CWE …","t":[3,3,6,0,0,11,12,11,11,11,11,11,11,0,11,11,11,12,11,11,11,5,0,11,11,11,11,12,11,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,8,3,3,4,4,4,4,8,3,3,13,3,3,13,13,13,3,13,8,8,8,13,13,8,8,13,13,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,0,0,0,0,0,0,0,8,3,16,11,11,5,11,11,10,11,11,10,11,11,10,10,10,11,11,11,10,10,10,11,10,5,5,3,8,16,16,16,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,10,8,3,16,11,11,5,11,11,10,11,11,10,11,11,10,11,11,11,10,10,10,11,10,10,13,13,13,13,13,13,13,13,13,4,13,6,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,4,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,7,3,6,3,3,6,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,13,13,13,13,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,13,13,13,4,13,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,5,7,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,5,7,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,3,4,13,13,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,7,5,7,3,11,11,5,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,3,7,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,5,5,5,4,13,13,4,6,8,3,13,13,13,13,13,13,3,13,13,13,13,3,13,4,13,3,4,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,3,3,13,13,13,13,3,13,3,3,13,13,4,13,13,3,11,11,12,12,12,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,12,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,10,10,12,12,11,11,10,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,4,13,13,13,13,13,13,3,13,13,13,13,13,3,3,3,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,4,13,13,13,3,3,13,3,13,13,3,13,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,5,5,0,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,3,13,13,13,13,4,3,3,4,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,12,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5],"n":["AnalysisResults","CweModule","CweModuleFn","abstract_domain","analysis","bin_op","binary","borrow","borrow","borrow_mut","borrow_mut","bytesize","cast","checkers","clone","clone_into","compute_pointer_inference","control_flow_graph","fmt","from","from","get_modules","intermediate_representation","into","into","into_resize_signed","into_resize_unsigned","name","new","pcode","pointer_inference","project","run","runtime_memory_image","set_pointer_inference","signed_add_overflow_checked","signed_mult_with_overflow_flag","signed_sub_overflow_checked","subpiece","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","un_op","utils","version","AbstractDomain","AbstractIdentifier","AbstractIdentifierData","AbstractLocation","AbstractMemoryLocation","BitvectorDomain","DataDomain","HasTop","Interval","IntervalDomain","Location","MemRegion","MemRegionData","Pointer","Pointer","Pointer","PointerDomain","Register","RegisterDomain","SizedDomain","SpecializeByConditional","Top","Top","TryToBitvec","TryToInterval","Value","Value","add","add","add","add","add","add","add_not_equal_bound","add_not_equal_bound","add_not_equal_bound","add_signed_greater_equal_bound","add_signed_greater_equal_bound","add_signed_greater_equal_bound","add_signed_less_equal_bound","add_signed_less_equal_bound","add_signed_less_equal_bound","add_target","add_to_offset","add_unsigned_greater_equal_bound","add_unsigned_greater_equal_bound","add_unsigned_greater_equal_bound","add_unsigned_less_equal_bound","add_unsigned_less_equal_bound","add_unsigned_less_equal_bound","adjust_end_to_value_in_stride","adjust_start_to_value_in_stride","adjust_to_stride_and_remainder","bin_op","bin_op","bin_op","bin_op","bin_op_bytesize","bitwise_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytesize","bytesize","bytesize","bytesize","bytesize","bytesize","cast","cast","cast","cast","clear_offset_interval","clear_top_values","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","deref","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","end","entry_map","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal_as_value_sets","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fits_into_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_var","get","get_address_bytesize","get_unsized","hash","hash","hash","hash","hash","hash","hash","hash","hash","ids","insert_at_byte_index","int_2_comp","intersect","into","into","into","into","into","into","into","into","into","into","into","is_top","is_top","is_top","is_top","is_top","is_top","is_top","iter","merge","merge","merge","merge","merge","merge","merge","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg","new","new","new","new","new","new","new_top","new_top","new_top","new_top","new_top","new_top","partial_cmp","partial_cmp","partial_cmp","partial_cmp","piece","referenced_ids","remove","remove_ids","replace_abstract_id","replace_abstract_id","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shift_left","sign_extend","signed_intersect","signed_merge","signed_merge","signed_merge_and_widen","signed_mul","signed_mul","start","stride","sub","sub","sub","sub","sub","sub_from_offset","subpiece","subpiece","subpiece","subpiece","subpiece","subpiece_higher","subpiece_lower","targets","to_json_compact","to_json_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","top","top","top","top","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_bitvec","try_to_bitvec","try_to_bitvec","try_to_bitvec","try_to_interval","try_to_interval","try_to_interval","try_to_interval","try_to_offset","try_to_offset_interval","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","un_op","un_op","un_op","un_op","unwrap_if_unique_target","update_widening_lower_bound","update_widening_upper_bound","values","values_mut","with_targets","zero_extend","zero_extend","offset","offset","size","size","target","backward_interprocedural_fixpoint","dead_variable_elimination","fixpoint","forward_interprocedural_fixpoint","graph","interprocedural_fixpoint_generic","pointer_inference","Context","GeneralizedContext","Value","borrow","borrow_mut","create_computation","from","get_context","get_graph","get_graph","into","merge","merge","new","specialize_conditional","split_call_stub","split_return_stub","try_from","try_into","type_id","update_call_stub","update_callsite","update_def","update_edge","update_jumpsite","compute_alive_vars","remove_dead_var_assignments","Computation","Context","EdgeLabel","NodeLabel","NodeValue","borrow","borrow_mut","compute","compute_with_max_steps","from","get_context","get_graph","get_graph","get_node_value","get_worklist","has_stabilized","into","merge","new","node_values","set_node_value","try_from","try_into","type_id","update_edge","Context","GeneralizedContext","Value","borrow","borrow_mut","create_computation","from","get_context","get_graph","get_graph","into","merge","merge","new","specialize_conditional","try_from","try_into","type_id","update_call","update_call_stub","update_def","update_edge","update_jump","update_return","BlkEnd","BlkStart","Block","Call","CallCombine","CallReturn","CallSource","CrCallStub","CrReturnStub","Edge","ExternCallStub","Graph","Jump","Node","ReturnCombine","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_block","get_program_cfg","get_sub","hash","hash","into","into","ne","ne","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","call","return_","source","target","CallFlowCombinator","NodeValue","Value","borrow","borrow_mut","deserialize","eq","equivalent","from","into","merge_option","ne","serialize","try_from","try_into","type_id","unwrap_value","call_stub","interprocedural_flow","CWE_MODULE","Config","Data","PointerInference","State","ValueDomain","add_directly_reachable_ids_to_id_set","add_recursively_referenced_ids_to_id_set","allocation_symbols","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caller_stack_ids","clear_non_callee_saved_register","clear_stack_parameter","clone","clone","clone_into","clone_into","collected_logs","compute","compute_with_speculative_entry_points","contains_access_of_dangling_memory","contains_out_of_bounds_mem_access","deallocation_symbols","deserialize","deserialize","eq","eq","equivalent","equivalent","eval","eval_parameter_arg","extract_pi_analysis_results","fmt","fmt","from","from","from","generate_compact_json","get_context","get_graph","get_node_value","get_register","get_register_by_name","handle_load","handle_register_assign","handle_store","hash","ids_known_to_caller","into","into","into","is_stack_pointer_with_nonnegative_offset","is_top","load_value","mark_mem_object_as_freed","memory","merge","merge_callee_stack_to_caller_stack","ne","ne","new","new","object","pointer_contains_out_of_bounds_target","print_compact_json","print_yaml","readd_caller_objects","remove_callee_saved_register","remove_other_caller_stack_ids","remove_unreferenced_objects","remove_virtual_register","replace_abstract_id","restore_callee_saved_register","run","serialize","serialize","set_register","specialize_by_expression_result","stack_id","store_value","to_json_compact","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_to_address","AbstractObject","AbstractObjectInfo","Alive","Dangling","Flagged","Heap","ObjectState","ObjectType","Stack","Unknown","access_contained_in_bounds","assume_arbitrary_writes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","get_object_type","get_referenced_ids_overapproximation","get_referenced_ids_underapproximation","get_state","get_value","hash","hash","into","into","into","into","is_top","is_unique","mark_as_freed","mark_as_maybe_freed","merge","merge","merge","merge_value","ne","ne","new","new","partial_cmp","partial_cmp","remove_ids","replace_abstract_id","serialize","serialize","serialize","serialize","set_lower_index_bound","set_state","set_upper_index_bound","set_value","to_json_compact","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","cwe_134","cwe_190","cwe_215","cwe_243","cwe_332","cwe_367","cwe_426","cwe_467","cwe_476","cwe_560","cwe_676","cwe_78","cwe_782","CWE_MODULE","Config","GlobalReadable","GlobalWriteable","NonGlobal","StringLocation","Unknown","borrow","borrow","borrow_mut","borrow_mut","check_cwe","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","from","from","into","into","ne","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","hash","into","ne","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","check_cwe","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","hash","into","ne","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","hash","into","ne","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","check_cwe","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","hash","into","ne","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","hash","into","ne","serialize","to_owned","try_from","try_into","type_id","CWE_MODULE","Config","Taint","Tainted","Top","bin_op","borrow","borrow","borrow_mut","borrow_mut","bytesize","cast","check_cwe","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","hash","hash","into","into","is_tainted","is_top","merge","ne","ne","new_top","serialize","serialize","subpiece","to_owned","to_owned","to_string","top","try_from","try_from","try_into","try_into","type_id","type_id","un_op","CWE_MODULE","UPPER_BOUND_CORRECT_CHMOD_ARG_VALUE","UPPER_BOUND_CORRECT_UMASK_ARG_VALUE","check_cwe","CWE_MODULE","Config","borrow","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","generate_cwe_warnings","get_calls","hash","into","ne","resolve_symbols","serialize","to_owned","try_from","try_into","type_id","BlockMaps","CWE_MODULE","Config","SymbolMaps","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_cwe","clone","clone_into","deserialize","eq","equivalent","fmt","from","from","from","into","into","into","ne","new","new","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CWE_MODULE","check_cwe","generate_cwe_warning","handle_sub","Arg","Assign","BinOp","BinOpType","Bitvector","BitvectorExtended","Blk","BoolAnd","BoolNegate","BoolOr","BoolXOr","Branch","BranchInd","ByteSize","CBranch","Call","CallInd","CallOther","CallingConvention","Cast","CastOpType","Const","DatatypeProperties","Def","Expression","ExternSymbol","Float2Float","FloatAbs","FloatAdd","FloatCeil","FloatDiv","FloatEqual","FloatFloor","FloatLess","FloatLessEqual","FloatMult","FloatNaN","FloatNegate","FloatNotEqual","FloatRound","FloatSqrt","FloatSub","Int2Comp","Int2Float","IntAdd","IntAnd","IntCarry","IntDiv","IntEqual","IntLeft","IntLess","IntLessEqual","IntMult","IntNegate","IntNotEqual","IntOr","IntRem","IntRight","IntSBorrow","IntSCarry","IntSDiv","IntSExt","IntSLess","IntSLessEqual","IntSRem","IntSRight","IntSub","IntXOr","IntZExt","Jmp","Load","Piece","PopCount","Program","Project","Register","Return","Stack","Store","Sub","Subpiece","Term","Tid","Trunc","UnOp","UnOpType","Unknown","Var","Variable","add","add_assign","address","address_base_offset","addresses","as_bit_length","bin_op","blk_id_at_address","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytesize","bytesize","callee_saved_register","calling_convention","calling_conventions","cast","cast_sub_registers_to_base_register_subpieces","char_size","check_for_zero_extension","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cpu_architecture","datatype_properties","defs","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div_assign","double_size","entry_points","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extern_symbols","find_block","float_parameter_register","float_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_calling_convention","get_pointer_bytesize","get_standard_calling_convention","get_unique_parameter","get_unique_return_register","has_var_args","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","indirect_jmp_targets","input_vars","integer_parameter_register","integer_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ir_sub_term","into_resize_signed","into_resize_unsigned","is_temp","jmps","long_double_size","long_long_size","long_size","merge_def_assignments_to_same_var","mul","mul_assign","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","no_return","normalize","not","parameters","partial_cmp","partial_cmp","partial_cmp","plus","plus_const","pointer_size","program","propagate_input_expressions","register_list","rem","rem_assign","remove_nonexisting_indirect_jump_targets","return_register","return_values","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl_assign","short_size","shr","shr_assign","signed_add_overflow_checked","signed_mult_with_overflow_flag","signed_sub_overflow_checked","size","stack_pointer_register","sub","sub_assign","subpiece","subs","substitute_input_var","substitute_input_var","substitute_trivial_operations","sum","term","tid","tid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","un_op","with_id_suffix","offset","size","address","address","value","value","var","var","arg","arg","arg","description","lhs","low_byte","op","op","op","rhs","size","size","size","condition","description","return_","return_","return_","target","target","target","Arg","ArgIntent","BOOL_AND","BOOL_NEGATE","BOOL_OR","BOOL_XOR","BRANCH","BRANCHIND","Blk","CALL","CALLIND","CALLOTHER","CBRANCH","COPY","Call","CallingConvention","Def","Direct","Expression","ExpressionType","ExternSymbol","FLOAT2FLOAT","FLOAT_ABS","FLOAT_ADD","FLOAT_CEIL","FLOAT_DIV","FLOAT_EQUAL","FLOAT_FLOOR","FLOAT_LESS","FLOAT_LESSEQUAL","FLOAT_MULT","FLOAT_NAN","FLOAT_NEG","FLOAT_NOTEQUAL","FLOAT_ROUND","FLOAT_SQRT","FLOAT_SUB","INPUT","INT2FLOAT","INT_2COMP","INT_ADD","INT_AND","INT_CARRY","INT_DIV","INT_EQUAL","INT_LEFT","INT_LESS","INT_LESSEQUAL","INT_MULT","INT_NEGATE","INT_NOTEQUAL","INT_OR","INT_REM","INT_RIGHT","INT_SBORROW","INT_SCARRY","INT_SDIV","INT_SEXT","INT_SLESS","INT_SLESSEQUAL","INT_SREM","INT_SRIGHT","INT_SUB","INT_XOR","INT_ZEXT","Indirect","Jmp","JmpType","LOAD","Label","OUTPUT","PIECE","POPCOUNT","Program","Project","RETURN","RegisterProperties","STORE","SUBPIECE","Sub","TRUNC","Variable","address","addresses","arguments","base_register","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_string","calling_convention","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","cpu_architecture","datatype_properties","defs","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","entry_points","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extern_symbols","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","goto","has_var_args","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","image_base","input0","input1","input2","intent","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ir_blk","into_ir_def","into_ir_program","into_ir_project","is_virtual","jmps","lhs","location","lsb","mnemonic","mnemonic","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new_const","new_virtual","no_return","normalize","parse_address_to_bitvector","parse_const_to_bitvector","parse_to_bytesize","program","register","register_calling_convention","register_properties","return_","rhs","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","size","stack_pointer_register","subs","target","target_hints","tid","to_load_def","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","var","arguments","binary","get_binary_base_address","get_ghidra_plugin_path","graph_utils","log","read_config_file","symbol_utils","calculate_parameter_locations","create_string_register_arg","create_string_stack_arg","get_input_format_string","get_return_registers_from_symbol","get_variable_number_parameters","is_float","is_integer","is_pointer","is_string","map_format_specifier_to_bytesize","parse_format_string_destination_and_return_content","parse_format_string_parameters","RuntimeMemoryImage","add_global_memory_offset","borrow","borrow_mut","clone","clone_into","deserialize","eq","equivalent","fmt","from","get_ro_data_pointer_at_address","hash","into","is_address_writeable","is_global_memory_address","is_interval_readable","is_interval_writeable","is_little_endian_byte_order","ne","new","read","read_string_until_null_terminator","serialize","to_owned","try_from","try_into","type_id","is_sink_call_reachable_from_source_call","Cwe","CweWarning","Debug","Error","Info","Log","LogLevel","LogMessage","LogThread","LogThreadMsg","Terminate","addresses","addresses","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","collect","create_disconnected_sender","default","description","deserialize","deserialize","deserialize","deserialize","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_msg_sender","hash","hash","hash","hash","into","into","into","into","into","level","location","location","name","ne","ne","ne","new","new_debug","new_error","new_info","other","other","partial_cmp","partial_cmp","partial_cmp","partial_cmp","print_all_messages","serialize","serialize","serialize","serialize","source","source","spawn","symbols","symbols","text","tids","tids","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","find_symbol","get_calls_to_symbols","get_callsites","get_symbol_map"],"q":["cwe_checker_lib","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::abstract_domaincwe_checker_lib::abstract_domain::AbstractMemoryLocation","","","","","cwe_checker_lib::analysis","","","","","","","cwe_checker_lib::analysis::backward_interprocedural_fixpoint","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::dead_variable_elimination","","cwe_checker_lib::analysis::fixpoint","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::forward_interprocedural_fixpoint","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::graph::Node","","","","cwe_checker_lib::analysis::interprocedural_fixpoint_generic","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::interprocedural_fixpoint_generic::NodeValue","","cwe_checker_lib::analysis::pointer_inference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::analysis::pointer_inference::object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_134","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_190","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_215","","cwe_checker_lib::checkers::cwe_243","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_332","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_367","","cwe_checker_lib::checkers::cwe_426","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_467","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_476","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_560","","","","cwe_checker_lib::checkers::cwe_676","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_78","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::checkers::cwe_782","","","","cwe_checker_lib::intermediate_representationcwe_checker_lib::intermediate_representation::Arg","","cwe_checker_lib::intermediate_representation::Def","","","","","","cwe_checker_lib::intermediate_representation::Expression","","","","","","","","","","","","","cwe_checker_lib::intermediate_representation::Jmp","","","","","","","","cwe_checker_lib::pcodecwe_checker_lib::utils","","","","","","","","cwe_checker_lib::utils::arguments","","","","","","","","","","","","","cwe_checker_lib::utils::binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::utils::graph_utils","cwe_checker_lib::utils::log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cwe_checker_lib::utils::symbol_utils","","",""],"d":["A struct containing pointers to all known analysis results…","A structure containing general information about a CWE …","The generic function signature for the main function of a …","This module defines traits describing general properties …","Modules necessary for graph-based and fixpoint-based …","Perform a binary operation on the given bitvectors. …","The content of the binary file","","","","","Return the size in bytes of the bitvector.","Perform a cast operation on the bitvector. Returns an …","The implemented CWE checks. See their module descriptions …","","","Compute the pointer inference analysis. The result gets …","The computed control flow graph of the program.","Print the module name and its version number.","","","Get a list of all known analysis modules.","This module defines the intermediate representation used …","","","Resize <code>self</code> to the target byte size by either sign …","Resize <code>self</code> to the target byte size by either zero …","The name of the CWE check.","Create a new <code>AnalysisResults</code> struct with only the project …","Types to describe Ghidra P-Code and functions to …","The result of the pointer inference analysis if already …","A pointer to the project struct","The function that executes the check and returns CWE …","A representation of the runtime memory image of the …","Create a new <code>AnalysisResults</code> struct containing the given …","Returns the result of <code>self + rhs</code> if the computation does …","Return the result of multiplying <code>self</code> with <code>rhs</code> and a flag …","Returns the result of <code>self - rhs</code> if the computation does …","Extract a subpiece from the given bitvector.","","","","","","","","","Perform a unary operation on the given bitvector. Returns …","This module contains various utility modules and helper …","The version number of the CWE check. Should be …","The main trait describing an abstract domain.","An abstract identifier is used to identify an object or a …","The data contained in an abstract identifier","An abstract location describes how to find the value of a …","An abstract memory location is either an offset from the …","The <code>BitvectorDomain</code> is a simple abstract domain …","An abstract domain representing either a pointer or a …","An abstract domain implementing this trait has a global …","A strided interval of values with a fixed byte size.","An abstract domain representing values in an interval …","A location inside the current memory object.","A memory region is an abstract domain representing a …","The internal data of a memory region. See the description …","The location is in memory. One needs to follow the …","A pointer which needs to be followed to get to the actual …","The value is a pointer to an abstract memory object.","An abstract value representing a pointer given as a map …","The location is given by a register with the given name …","A trait for abstract domains that can represent values …","A trait for types representing values with a fixed size …","A trait for domains whose values can be restricted by …","The <code>Top</code> value of the domain, representing the case that …","The <code>Top</code> element of the domain. Describes a value for …","A conversion trait for abstract domains that can …","A conversion trait for abstract domains that can …","The exact value of the bitvector is known.","The value is a non-pointer value or a pointer to global …","","","Add a value to the memory region.","Compute the interval of possible results if one adds a …","","Compute the interval of possible results if one adds a …","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Add a new target to the pointer. If the pointer already …","add a value to the offset","Return the restriction of <code>self</code> to values satisfying …","","","Return the restriction of <code>self</code> to values satisfying …","","","Round down <code>self.end</code> to the nearest value such that …","Round up <code>self.start</code> to the nearest value such that …","Change the given interval such that it only contains …","Compute the (abstract) result of a binary operation","Evaluate the given binary operation.","Compute the (abstract) result of a binary operation","Compute the result of a binary operation between two …","Return the bytesize of the result of the given binary …","Compute the bitwise negation of values in the interval. …","","","","","","","","","","","","","","","","","","","","","","","Return the size of the represented value in bytes.","Return the bytesize of <code>self</code>.","Return the bitsize of the pointer. Should always equal …","","Get the size in bytes of values contained in the interval.","Return the size in bytes of the represented values.","Perform a typecast to extend a bitvector or to cast …","Perform a size-changing cast on a bitvector.","Cast a bitvector using the given cast type","Compute the result of a cast operation on the interval …","Clear all values that might be overwritten if one writes …","Remove all values representing the <em>Top</em> element from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if <code>bitvec</code> is contained in the strided …","","","","","","","","","","","","","","","The end of the interval. The bound is included in the …","Get the map of all elements including their offset into …","","","","","","","","","","","","Returns true if the two intervals represent the same …","","","","","","","","","","","","Check whether all values in the interval are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an interval that only contains the given bitvector.","","Create an interval containing only <code>bitvec</code>.","Generate an interval domain without widening hints.","","Create an abstract location from a variable corresponding …","Get the value at the given position. If there is no value …","Get the bitsize of pointers for the address space that …","Get the value at the given position regardless of the …","","","","","","","","","","Get an iterator over all abstract IDs that the pointer …","Insert a value into the memory region at the given …","Take the 2’s complement of values in the interval.","Compute the intersection of two intervals. Return an …","","","","","","","","","","","","Returns whether the element represents the top element …","Check if the value is <em>Top</em>.","Returns false, as PointerDomain has no <em>Top</em> element.","Return whether the element represents a top element or …","The <em>Top</em> element is represented by an empty memory region.","Returns true if all values representable by bitvectors of …","Return <code>true</code> if the interval spans all possible values.","Get an iterator over all elements together with their …","Return an upper bound (with respect to the partial order …","merge two values. Returns <em>Top</em> if the values are not equal.","Merge two pointers.","","Short-circuting the <code>MemRegionData::merge</code> function if …","Merge two memory regions.","Merge two interval domains and perform widening if …","","","","","","","","","","","","","","create a new abstract identifier","Create a new pointer with exactly one target.","Create a new, empty memory region.","create a new, empty MemRegion","Construct a new interval.","Create a new interval domain with the given bounds.","Return a new top element with the given bytesize. The …","Get a <em>Top</em> element with the given bitsize.","PointerDomain has no explicit <code>Top</code> element, thus calling …","","Construct a new unconstrained interval.","Return a new <code>Top</code> value with the given bytesize.","","","","","Piece two intervals together, where <code>self</code> contains the …","Return a set of all referenced abstract IDs. The set is …","Remove all elements intersecting the provided interval.","If <em>self</em> is a pointer, remove all provided IDs from the …","Replace an abstract identifier with another one and add …","For pointer values replace an abstract identifier with …","","","","","","","","","","","","Compute the resulting interval after a left shift …","Sign-extend the values in the interval to the given width.","Compute the intersection of two intervals as intervals of …","Merge two intervals interpreting both as intervals of …","Merge as signed intervals without performing widenings.","Merge as signed intervals and perform widening if …","Compute the interval of possible results if one …","Compute the interval of possible results if one …","The start of the interval. The bound is included in the …","The stride.","","","Compute the interval of possible results if one subtracts …","Compute the interval of possible results if one subtracts …","","subtract a value from the offset","Extract a sub-bitvector","Extract a sub-bitvector out of a bitvector","extract a sub-bitvector","Take a subpiece of the bitvectors.","Take a sub-bitvector of the values in the interval domain.","Truncate the bitvectors in the interval by removing the …","Truncate the bitvectors in the interval to <code>size</code>, i.e. the …","Get all possible abstract targets (together with the …","Get a more compact json-representation of the pointer. …","Get a more compact json-representation of the data domain.…","","","","","","","","","","","","","","","","","Return an instance of the <em>Top</em> element.","Return a <em>Top</em> value with the same bytesize as <code>self</code>.","","Return a new, empty memory region with the same address …","Return a new interval with the same byte size as <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","If <code>self</code> represents a single absolute value, return it. In …","If the domain represents an absoulute value, return it.","If the domain represents a single, absolute value, return …","If the domain represents an interval of length one, …","If <code>self</code> represents an interval of absolute values (or can …","If the domain represents an absolute value, return it as …","If the domain represents (or can be widened to) an …","If the domain represents a bounded (i.e. not <code>Top</code>) …","If <code>self</code> represents a single absolute value, try to …","If <code>self</code> represents an interval of absolute values (or can …","","","","","","","","","","","","Compute the (abstract) result of a unary operation","Evaluate the given unary operation.","Compute the (abstract) result of a unary operation","Compute the result of an unary operation on the interval …","Return the target and offset of the pointer if it points …","If <code>bound</code> is more exact/restrictive than the current lower …","If <code>bound</code> is more exact/restrictive than the current upper …","Get an iterator over all values in the memory region","Get an iterator over all values in the memory region for …","Create a new pointer with a set of targets. Panics if no …","Compute the interval represented if the byte size of the …","Zero-extend the values in the interval to the given width.","The offset with respect to the zero offset of the memory …","The offset inside the current memory object where the …","The size in bytes of the value that the memory location …","The size in bytes of the pointer.","The memory location inside the target of the pointer that …","Creating and computing backward interprocedural fixpoint …","This module contains a fixpoint computation to compute …","Creating and computing generic fixpoint computations.","Creating and computing forward interprocedural fixpoint …","Generate control flow graphs out of a program term.","Types and functions shared between the implementations of …","A fixpoint algorithm analyzing all memory accesses in a …","The context for an backward interprocedural fixpoint …","This struct is a wrapper to create a general fixpoint …","The type of the values that are assigned to nodes during …","","","Generate a new computation from the corresponding context …","","Get the inner context object.","Get a reference to the graph that the fixpoint is …","Get a reference to the underlying graph.","","Merge two node values.","Merge two values using the merge function from the …","Create a new generalized context out of an …","This function is used to refine the value using the …","Transition function for call stub split. Has access to …","Transition function for return stub split. Has access to …","","","","Transition function for calls to functions not contained …","Transition function for in-program calls. The target …","Transition function for <code>Def</code> terms. The transition …","Backward edge transition function. Applies the transition …","Transition function for (conditional and unconditional) …","Compute alive variables by means of an intraprocedural …","Remove all dead assignments from all basic blocks in the …","The computation struct contains an intermediate result of …","The context of a fixpoint computation.","the type of edge labels of the underlying graph","the type of node labels of the underlying graph","The type of the value that gets assigned to each node. …","","","Compute the fixpoint of the fixpoint problem. If the …","Compute the fixpoint of the fixpoint problem. Each node …","","Get a reference to the underlying context object","Get the graph on which the fixpoint computation operates.","Get a reference to the underlying graph","Get the value of a node.","Return a list of all nodes which are marked as …","Returns <code>True</code> if the computation has stabilized, i.e. the …","","This function describes how to merge two values","Create a new fixpoint computation from a fixpoint …","Get a reference to the internal map where one can look up …","Set the value of a node and mark the node as not yet …","","","","This function describes how the value at the end node of …","The context for an interprocedural fixpoint computation.","This struct is a wrapper to create a general fixpoint …","The type of the values that are assigned to nodes during …","","","Generate a new computation from the corresponding context …","","Get the inner context object.","Get a reference to the graph that the fixpoint is …","Get a reference to the underlying graph.","","Merge two node values.","Merge two values using the merge function from the …","Create a new generalized context out of an …","This function is used to refine the value using the …","","","","Transition function for in-program calls.","Transition function for calls to functions not contained …","Transition function for <code>Def</code> terms. The transition …","Forward edge transition function. Applies the transition …","Transition function for (conditional and unconditional) …","Transition function for return instructions. Has access …","A node corresponding to the end of the basic block, i.e. …","A node corresponding to the start of a basic block, i.e. …","An edge between the <code>BlkStart</code> and <code>BlkEnd</code> nodes of a basic …","An edge corresponding to a function call instruction. …","An artificial edge to combine intra- and interprocedural …","An artificial node. See the module-level documentation …","An artificial node. See the module-level documentation …","An artificial edge. See the module-level documentation …","An artificial edge. See the module-level documentation …","The edge type of an interprocedural fixpoint graph.","An edge corresponding to a call to a function not …","The graph type of an interprocedural control flow graph","An edge corresponding to an intraprocedural jump …","The node type of an interprocedural control flow graph","An artificial edge to combine intra- and interprocedural …","","","","","","","","","","","","","","","","","","Get the block corresponding to the node for <code>BlkStart</code> and …","Build the interprocedural control flow graph for a …","Get the sub corresponding to the node for <code>BlkStart</code> and …","","","","","","","","","","","","","","","","","","The block containing the callsite of the call.","The block that the called functions returns to.","The block containing the callsite of the call","The block containing the target of the call, i.e. the …","The value saved at artificial combinator nodes.","NodeValue that can either be a single abstract value or a …","A single abstract value","","","","","","","","Helper function to merge to values wrapped in <code>Option<..></code>. …","","","","","","Unwraps the contained value for non-combinator nodes. …","The value flowing through the intraprocedural edge of the …","The value flowing through the interprocedural edge of the …","The name and version number of the “Memory” CWE check.","Configurable parameters for the analysis.","The abstract domain type for representing register values.","A wrapper struct for the pointer inference computation …","Contains all information known about the state of a …","The abstract domain to use for absolute values.","Search (recursively) through all memory objects …","Search (recursively) through all memory objects …","Names of extern functions that are <code>malloc</code>-like, i.e. the …","","","","","","","All known IDs of caller stack frames. Note that these IDs …","Clear all non-callee-saved registers from the state. This …","Mark those parameter values of an extern function call, …","","","","","The log messages and CWE warnings that have been …","Compute the fixpoint of the pointer inference analysis. …","Compute the results of the pointer inference fixpoint …","Check if an expression contains a use-after-free. If yes, …","Returns <code>true</code> if the given <code>Def</code> is a load or store …","Names of extern functions that are <code>free</code>-like, i.e. the …","","","","","","","Evaluate the value of an expression in the current state","Evaluate the value of a parameter of an extern symbol for …","The entry point for the memory analysis check. Does not …","","","","","","Generate a compacted json representation of the results. …","Get the context object of the computation.","Get the underlying graph of the computation.","Get the value associated to a node in the computed …","Get the value of a register or Top() if no value is known.","Get the value of a register by its name.","Handle a load instruction by assigning the value loaded …","Evaluate expression on the given state and write the …","Evaluate the store instruction, given by its address and …","","All IDs of objects that are known to some caller. This is …","","","","Return <code>true</code> if <code>data</code> is a pointer to the current stack …","A state has no <em>Top</em> element","Evaluate the given load instruction and return the data …","Mark a memory object as already freed (i.e. pointers to …","The list of all known memory objects.","Merge two states","Merge the callee stack with the caller stack.","","","Generate a new pointer inference compuation for a project.","Create a new state that contains only one memory object …","This module contains the definition of the abstract …","Returns <code>true</code> if <code>data</code> is a pointer pointing outside of the …","Print a compacted json representation of the results to …","Print results serialized as YAML to stdout","Add those objects from the <code>caller_state</code> to <code>self</code>, that are …","Remove all knowledge about the contents of callee-saved …","Recursively remove all <code>caller_stack_ids</code> not corresponding …","Remove all objects that cannot longer be reached by any …","Remove all virtual register from the state. This should …","Replace all occurences of old_id with new_id and adjust …","Restore the content of callee-saved registers from the …","Compute the pointer inference analysis and return its …","","","Set the value of a register.","Try to restrict the input variables of <code>expression</code> on <code>self</code> …","The abstract identifier of the current stack frame. It …","Store <code>value</code> at the given <code>address</code>.","Get a more compact json-representation of the state. …","","","","","","","","","","","","Write a value to the address one gets when evaluating the …","A wrapper struct wrapping <code>AbstractObjectInfo</code> in an <code>Arc</code>.","The abstract object info contains all information that we …","The object is alive.","The object is dangling, i.e. the memory has been freed …","The object was referenced in an “use-after-free” or …","A memory object located on the heap.","An object is either alive or dangling (because the memory …","An object is either a stack or a heap object.","A stack object, i.e. the stack frame of a function.","The state of the object is unknown (due to merging …","Check whether a memory access to the abstract object at …","Invalidates all memory and adds the <code>additional_targets</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the type of the memory object.","Get all abstract IDs that the object may contain pointers …","Get all abstract IDs for which the object contains …","Get the state of the memory object.","Read the value at the given offset of the given size (in …","","","","","","","The domain has no <em>Top</em> element, thus this function always …","Tracks whether this may represent more than one actual …","Mark the memory object as freed. Returns an error if a …","Mark the memory object as possibly (but not definitely) …","Short-circuits the <code>AbstractObjectInfo::merge</code> function if …","Merge two abstract objects","Merge two object states. If one of the two states is …","Merge <code>value</code> at position <code>offset</code> with the value currently …","","","Create a new abstract object with given object type and …","Create a new abstract object with known object type and …","","","Remove the provided IDs from the target lists of all …","For pointer values replace an abstract identifier with …","","","","","Set the lower index bound that is still considered to be …","If <code>self.is_unique==true</code>, set the state of the object. …","Set the upper index bound that is still considered to be …","Write a value at the given offset to the memory region.","Get a more compact json-representation of the abstract …","","","","","","","","","","","","","","","","","This module implements a check for CWE-134: Use of …","This module implements a check for CWE-190: Integer …","This module implements a check for CWE-215: Information …","This module implements a check for CWE-243: Creation of …","This module implements a check for CWE332: Insufficient …","This module implements a check for CWE-367: Time-of-check …","This module implements a check for CWE-426: Untrusted …","This module implements a check for CWE-467: Use of …","This module implements a check for CWE-476: NULL Pointer …","This module implements a check for CWE-560: Use of …","This module implements a check for CWE-676: Use of …","This module implements a check for CWE-78: Improper …","This module implements a check for CWE-782: Exposed IOCTL …","The module name and version","The configuration struct","Global read only memory","Global read and write memory","Non Global memory","The categorization of the string location based on kinds …","Unknown memory","","","","","This check searches for external symbols that take a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module name and version","The configuration struct. The <code>symbols</code> are extern function …","","","Run the CWE check. For each call to one of the symbols …","","","","","","","","","","","","","","","","The module name and version","Run the check.","The module name and version","The configuration struct contains the list of functions …","","","Run the check.","","","","","","","","","","","","","","","","The module name and version","The configuration struct contains pairs of symbol names, …","","","Run the CWE check. See the module-level description for …","","","","","","","","","","","","","","","","The module name and version","Run the check. See the module-level documentation for …","The module name and version","Function symbols read from <em>config.json</em>. The symbols are …","","","Run the CWE check. We check whether a function calls both …","","","","","","","","","","","","","","","","The module name and version","Function symbols read from <em>config.json</em>. All parameters of …","","","Execute the CWE check.","","","","","","","","","","","","","","","","The module name and version","The configuration struct","An abstract domain representing a value that is either …","A tainted value of a particular bytesize.","An untainted value of a particular bytesize","The result of a binary operation is tainted if at least …","","","","","The size in bytes of the <code>Taint</code> value.","The result of a cast operation is tainted if the input …","Run the CWE check. We check whether the return values of …","","","","","","","","","","","Print the value of a <code>Taint</code> object.","","","","","","","","","Checks whether the given value is in fact tainted.","Checks whether the value is an untainted <code>Top</code>-value.","The result of merging two <code>Taint</code> values is tainted if at …","","","Get a new <code>Top</code>-value with the given bytesize.","","","A subpiece of a tainted value is again tainted.","","","","Get a new <code>Top</code>-value with the same bytesize as <code>self</code>.","","","","","","","The result of a unary operation is tainted if the input …","The module name and version","An upper bound for the value of a chmod-style argument.","An upper bound for the value of a presumably correct …","Execute the CWE check.","The module name and version","struct containing dangerous symbols from config.json","","","Iterate through all function calls inside the program and …","","","","","","","","Generate cwe warnings for potentially dangerous function …","For each subroutine and each found dangerous symbol, …","","","","Filter external symbols by dangerous symbols","","","","","","block_first_def_set: - A set containing a given <code>Def</code> as …","The module name and version","The configuration struct","string_symbols:Maps the TID of an extern string related …","","","","","","","This check searches for system calls and sets their …","","","","","","","","","","","","","","Creates a new instance of the symbol maps struct.","Creates a new instance of the block maps struct using the …","","","","","","","","","","","","The module name and version","Iterate through all calls of the program and flag calls …","generate the cwe warning for CWE 782","check whether the ioctl symbol is called by any …","A parameter or return argument of a function.","A register assignment, assigning the result of the …","A binary operation. Note that most (but not all) …","The type/mnemonic of a binary operation. See the Ghidra …","A bitvector is a fixed-length vector of bits with the …","A trait to extend the bitvector type with useful helper …","A basic block is a sequence of <code>Def</code> instructions followed …","","","","","A direct intraprocedural jump to the targeted <code>Blk</code> term …","An indirect intraprocedural jump to the address that the …","An unsigned number of bytes.","A direct intraprocedural jump that is only taken if the …","A direct interprocedural jump representing a subroutine …","An indirect interprocedural jump to the address the <code>target</code>…","This instruction is used for all side effects that are …","Calling convention related data","A cast operation for type cast between integer and …","The type/mnemonic of a typecast See the Ghidra P-Code …","A constant value represented by a bitvector.","Properties of C/C++ data types such as size.","A side-effectful operation. Can be a register assignment …","An expression is a calculation rule on how to compute a …","An extern symbol represents a funtion that is dynamically …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Jmp</code> instruction affects the control flow of a program, …","A memory load into the register given by <code>var</code>.","","","The <code>Program</code> structure represents a disassembled binary.","The <code>Project</code> struct is the main data structure …","The argument is passed in the given register","A indirect interprocedural jump indicating a return from …","The argument is passed on the stack. It is positioned at …","A memory store operation.","A <code>Sub</code> or subroutine represents a function with a given …","Extracting a sub-bitvector from the argument expression.","A term is an object inside a binary with an address and …","A term identifier consisting of an ID string (which is …","","A unary operation","The type/mnemonic of an unary operation See the Ghidra …","An unknown value but with known size. This may be …","A variable representing a register or temporary value of …","A variable represents a register with a known size and …","","","The address where the term is located.","An offset that has been added to all addresses in the …","Addresses of possibly multiple locations of the same …","Convert to the equivalent size in bits (by multiplying …","Perform a binary operation on the given bitvectors. …","Generate the ID of a block starting at the given address.","The basic blocks belonging to the subroutine. The first …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the size in bytes of the bitvector.","Return the size (in bytes) of the result value of the …","A list of callee-saved register, i.e. the values of these …","The calling convention used for the extern symbol if known","The known calling conventions that may be used for calls …","Perform a cast operation on the bitvector. Returns an …","This function checks for sub registers in pcode …","Holds the size of the char type","This function checks whether the instruction is a zero …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The CPU architecture on which the binary is assumed to be …","Contains the properties of C data types. (e.g. size)","The <code>Def</code> instructions of the basic block in order of …","","","","","","","","","","","","","","","","","","","","","Holds the size of the double type","Entry points into to binary, i.e. the term identifiers of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extern symbols linked to the binary by the linker.","Find a block term by its term identifier. WARNING: The …","Possible float parameter registers.","Holds the size of the float type","","","","","","","","","","","","","","","","","","","","","","","","","Translate a P-Code variable into a register variable of …","Create a variable representing the same register as the …","","Translate a P-Code variable into a <code>Var</code>or <code>Const</code> expression …","","Translates a P-Code expression into an expression of the …","","Translates expression types. Panics when given a type not …","","Translates expression types. Panics when given a type not …","Translates expression types. Panics when given a type not …","","","","","Convert a P-Code jump to the internally used IR.","","","","","","","","","","","","Convert to <code>ByteSize</code>, while always rounding up to the …","","Get the calling convention corresponding to the extern …","Return the size (in bytes) for pointers of the given …","Try to guess a standard calling convention from the list …","If the extern symbol has exactly one parameter, return …","If the extern symbol has exactly one return value that is …","If the function has a variable number of parameters, this …","","","","","","","","","","","","","","","","","","","If the basic block contains an indirect jump, this field …","Return an array of all input variables of the given …","Possible integer parameter registers.","Holds the size of the integer type","","","","","","","","","","","","","","","","","","","Convert a <code>Sub</code> term in the P-Code representation to a <code>Sub</code> …","Resize <code>self</code> to the target byte size by either sign …","Resize <code>self</code> to the target byte size by either zero …","Set to <code>false</code> for physical registers and to <code>true</code> for …","The <code>Jmp</code> instructions of the basic block","Holds the size of the long double type","Holds the size of the long long type","Holds the size of the long type","Merge subsequent assignments to the same variable to a …","","","The name of the variable. Equals the register name if the …","The name of the subroutine","The name of the extern symbol","The name of the calling convention","","","","","","","","","","","","","","","","Generate a new term identifier with the given ID string …","Create a new <code>ByteSize</code> object","If set to <code>true</code>, the function is assumed to never return …","Run some normalization passes over the project.","","Parameters of an extern symbol. May be empty if there are …","","","","Shortcut for creating an <code>IntAdd</code>-expression","Construct an expression that adds a constant value to the …","Holds the size of the pointer type","All (known) executable code of the binary is contained in …","Wherever possible, substitute input variables of …","A list of all known physical registers for the CPU …","","","Remove indirect jump target addresses for which no …","A list of possible return register","Return values of an extern symbol. May be empty if there …","","","","","","","","","","","","","","","","","","","","","Holds the size of the short type","","","Returns the result of <code>self + rhs</code> if the computation does …","Return the result of multiplying <code>self</code> with <code>rhs</code> and a flag …","Returns the result of <code>self - rhs</code> if the computation does …","The size (in bytes) of the variable.","The stack pointer register for the given CPU architecture.","","","Extract a subpiece from the given bitvector.","The known functions contained in the binary","Substitute every occurence of <code>input_var</code> in <code>self</code> with the …","Substitute every occurence of <code>input_var</code> in the address …","Substitute some trivial expressions with their result. …","","The object","The term identifier, which also contains the address of …","The term ID of the extern symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform a unary operation on the given bitvector. Returns …","Add a suffix to the ID string and return the new <code>Tid</code>","The position of the argument on the stack given as offset …","The size in bytes of the argument.","The expression computing the address from which to read …","The expression computing the address that is written to. …","The expression computing the value that is written to …","The expression computing the value that is assigned to …","The target register of the memory load. The size of <code>var</code> …","The register that is written to.","The argument expression","The argument of the expression","The argument from which to extract the bitvector from.","A description of the operation","The left hand side expression","The lowest byte (i.e. least significant byte if …","The opcode/type of the operation","The opcode/type of the operation","The opcode/type of the cast operation","The right hand side expression","The byte size of the result value of the expresion","The byte size of the result of the unknown expression","The size of the resulting sub-bitvector","The jump is only taken if this expression evaluates to …","A description of the side effect.","The term ID of the block that the called function returns …","The term ID of the block that the called function returns …","The block term identifier of the block where the …","The term ID of the target block of the jump.","The term ID of the target subroutine (<code>Sub</code>) or extern …","An expression computing the target address of the call.","An argument (parameter or return value) of an extern …","The intent (input or output) of a function argument.","","","","","","","A basic block.","","","","","","A call instruction.","A struct describing a calling convention.","An assignment instruction, assigning the result of an …","The term identifier of the target of a direct jump.","A P-Code expression.","Expression Opcodes as parsed from Ghidra","An extern symbol, i.e. a function not contained in the …","","","","","","","","","","","","","","","","","The argument is an input parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The varnode holding the target address of an indirect …","A jump instruction.","A jump type mnemonic.","","A jump label for distinguishing between direct and …","The argument is a return value.","","","The program struct containing all information about the …","The project struct describing all known information about …","","Properties of a register with respect to its base …","","","A subfunction.","","A variable representing a varnode in Ghidra P-Code","If the varnode represents an implicit <code>LOAD</code> from memory, …","The addresses to call the extern symbol. May be more than …","The input and output arguments of the function.","The name of the base register.","The basic blocks of the function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The call struct for interprocedural jumps.","A description of the instruction for <code>CALLOTHER</code> …","The calling convention used (as reported by Ghidra, i.e. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the jump is a conditional jump, the varnode that has …","The CPU-architecture that the binary uses.","Contains the properties of C data types. (e.g. size)","The <code>Def</code> instructions of the block in chronological order.","","","","","","","","","","","","","","","","","","The term identifiers of entry points into the binary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The extern symbols referenced by the binary.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The target label for intraprocedural jumps.","If the function has a variable number of parameters, this …","","","","","","","","","","","","","","","","","","The base address of the memory image of the binary in RAM …","The first input varnode (if it exists).","The second input varnode (if it exists).","The third input varnode (if it exists).","The intent (input or output) of the argument.","","","","","","","","","","","","","","","","","","Convert a P-Code block to the internally used IR.","Convert a P-Code instruction to the internally used IR.","Convert a program parsed from Ghidra to the internally …","Convert a project parsed from Ghidra to the internally …","A flag set to <code>true</code> for virtual/temporary registers.","The jump instructions at the end of the basic block.","The target varnode whose value gets overwritten.","The expression computing the location of the argument if …","The least significant byte of the register when viewed as …","The instruction mnemonic","The mnemonic of the jump.","The name of the register if the varnode represents a …","The name of the function.","The name of the extern symbol.","The name of the calling convention.","","","","","","","","","","","","","","","Generate a variable representing a constant","Generate a virtual variable with the given name and size.","If the function is assumed to never return to the caller, …","This function runs normalization passes to bring the …","Parses a variable representing an address to a …","Parses a variable representing a concrete value to a …","Translates a variable into the byte size that it …","The program struct containing all binary-specific …","The register name.","Information about known calling conventions for the given …","Information about all CPU-architecture-specific registers.","The return label if the call is expected to return.","The expression that determines the value to be written.","","","","","","","","","","","","","","","","","","The size (in bytes) of the varnode","The size (in bytes) of the register","The stack pointer register of the CPU-architecture.","The subfunctions contained in the binary.","The target label. May be <code>None</code> for <code>CALLOTHER</code> instructions.","A list of potential jump targets for indirect jumps.","The term identifier of the extern symbol.","Create a LOAD instruction out of a variable representing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of the varnode if it represents a constant","The register containing the argument if it is passed in a …","Handles argument detection by parsing format string …","Utility structs and functions which directly parse the …","Get the base address for the image of a binary when …","Get the folder path to a Ghidra plugin bundled with the …","Helper functions for common tasks utilizing the control …","Structs and functions for generating log messages and CWE …","Get the contents of a configuration file.","Helper functions for common tasks utilizing extern …","Calculates the register and stack positions of format …","Creates a string register parameter given a register name.","Creates a string stack parameter given a size and stack …","Parses the input format string for the corresponding …","Returns all return registers of a symbol as a vector of …","Returns an argument vector of detected variable …","Checks whether the format specifier is of type float.","Checks whether the format specifier is of type int.","Checks whether the format specifier is of type pointer.","Checks whether the format specifier is a string pointer …","Maps a given format specifier to the bytesize of its …","Parses the destiniation address of the format string. It …","Parses the format string parameters using a regex, …","A representation of the runtime image of a binary after …","Add a global offset to the base addresses of all memory …","","","","","","","","","","For an address to global read-only memory, return the …","","","Check whether the given address points to a writeable …","Checks whether the constant is a global memory address.","Check whether all addresses in the given interval point …","Check whether all addresses in the given interval point …","Return whether values in the memory image should be …","","Generate a runtime memory image for a given binary.","Read the contents of the memory image at the given address…","Read the contents of memory from a given address onwards …","","","","","","Check whether a call to the <code>sink_symbol</code> is reachable from …","A CWE warning","A CWE warning message.","Messages intended for debugging.","Errors encountered during analysis.","Non-error messages intended for the user.","A normal log message.","The severity/type of a log message.","A generic log message.","A type for managing threads for collecting log messages.","The message types a logging thread can receive. See the […","If the log collector thread receives this signal, it …","Sets the address field of the CweWarning","Addresses in the binary associated with the CWE warning. …","","","","","","","","","","","","","","","","","","","","","","","Stop the logging thread by sending it the <code>Terminate</code> signal…","Just create a disconnected sender to a (non-existing) …","","A short description of the warning that is presented to …","","","","","If the logging thread still exists, send it the <code>Terminate</code> …","","","","","","","","","","","","","","","","","","","","Get a sender that can be used to send messages to the …","","","","","","","","","","The severity/type of the log message.","Associate a specific location to the log message.","The location inside the binary that the message is …","A short name of the CWE check, e.g. <code>CWE190</code>.","","","","Creates a new CweWarning by only setting name, version …","Create a new <code>Debug</code>-level log message","Create a new <code>Error</code>-level log message","Create a new <code>Info</code>-level log message","Sets the other field of the CweWarning","Other useful information. Content depends on the check …","","","","","Print all provided log- and CWE-messages.","","","","","Set the name of the source analysis for the log message.","The analysis where the message originated.","Create a new <code>LogThread</code> object with a handle to a freshly …","Sets the symbols field of the CweWarning","Symbol names (usually of extern symbols) associated to …","The log message.","Sets the Tids field of the CweWarning","Term IDs associated to the CWE warning. May be more exact …","","","","","","","","","","","","","","","","","","","","","","The version number of the check.","Find the extern symbol object for a symbol name and …","Match direct calls’ target tids in the program’s …","Find calls to TIDs contained as keys in the given symbol …","Get a map from TIDs to the corresponding extern symbol …"],"i":[0,0,0,0,0,1,2,3,2,3,2,1,1,0,2,2,2,2,3,3,2,0,0,3,2,1,1,3,2,0,2,2,3,2,2,1,1,1,1,2,3,3,2,3,2,3,2,1,0,3,0,0,0,0,0,0,0,0,0,0,4,0,0,5,4,6,0,5,0,0,0,7,6,0,0,7,6,7,6,8,9,10,10,11,6,10,11,6,10,11,6,10,12,12,11,6,10,11,6,10,9,9,9,13,7,6,10,13,9,7,14,15,5,4,12,6,16,8,9,10,7,14,15,5,4,12,6,16,8,9,10,17,7,12,6,9,10,13,7,6,10,8,8,7,14,15,5,4,12,6,16,8,9,10,7,14,15,5,4,12,6,16,8,9,10,14,15,5,4,9,14,16,16,7,14,15,5,4,12,6,16,8,9,10,9,8,7,14,15,5,4,12,6,16,8,9,10,10,7,14,15,5,4,12,6,16,8,9,10,10,7,7,14,14,15,5,5,4,4,12,6,16,8,9,10,10,7,7,14,15,5,4,12,6,6,6,6,6,16,8,9,9,10,10,10,5,8,8,8,7,14,15,5,4,16,8,9,10,12,8,9,10,7,14,15,5,4,12,6,16,8,9,10,18,7,12,6,16,9,10,8,18,7,12,6,16,8,10,7,14,15,5,4,12,6,16,8,9,10,7,10,14,12,16,8,9,10,17,7,12,6,9,10,14,15,5,4,9,6,8,6,12,6,7,14,15,5,4,12,6,16,8,9,10,10,10,9,9,10,10,9,10,9,9,7,6,9,10,10,12,13,7,6,9,10,9,9,12,12,6,7,14,15,5,4,12,6,16,8,9,10,7,14,5,4,10,19,7,6,16,10,7,14,15,5,4,12,6,16,8,9,10,7,14,15,5,4,12,6,16,8,9,10,20,7,6,10,21,7,6,10,20,21,7,14,15,5,4,12,6,16,8,9,10,13,7,6,10,12,10,10,8,8,12,9,10,22,23,22,23,23,0,0,0,0,0,0,0,0,0,24,25,25,0,25,25,24,25,25,24,25,25,24,24,24,25,25,25,24,24,24,25,24,0,0,0,0,26,26,26,27,27,27,27,27,27,26,27,27,27,27,27,26,27,27,27,27,27,27,26,0,0,28,29,29,0,29,29,28,29,29,28,29,29,28,29,29,29,28,28,28,29,28,28,30,30,31,31,31,30,30,31,31,0,31,0,31,0,31,30,31,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,30,0,30,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,30,31,32,32,33,33,34,0,34,34,34,34,34,34,34,34,0,34,34,34,34,34,34,35,35,0,0,0,0,0,0,36,36,37,38,36,37,38,36,37,36,36,36,36,37,36,37,38,38,38,36,36,37,36,37,36,37,36,37,36,36,0,36,37,38,36,37,38,38,38,38,36,36,36,36,36,37,36,38,36,37,36,36,36,36,36,36,36,36,37,38,36,0,36,38,38,36,36,36,36,36,36,36,0,36,37,36,36,36,36,36,36,37,38,36,37,38,36,37,38,36,37,36,0,0,39,39,39,40,0,0,40,39,41,41,42,41,40,39,42,41,40,39,42,41,40,39,42,41,40,39,40,39,42,42,42,41,40,39,42,41,40,39,42,41,40,39,42,41,40,39,42,41,40,39,41,41,41,41,41,40,39,42,41,40,39,41,41,41,41,42,41,39,41,42,41,42,41,40,39,41,41,42,41,40,39,41,41,41,41,41,42,41,40,39,42,41,40,39,42,41,40,39,42,41,40,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,0,43,44,43,44,43,0,44,43,44,43,44,43,44,43,44,43,44,43,44,43,44,43,44,44,43,44,43,44,43,44,43,44,43,0,0,45,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,49,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,50,50,50,50,51,50,51,50,50,0,50,51,50,51,50,51,50,51,50,51,50,50,51,50,51,50,51,50,51,50,50,50,50,51,50,50,51,50,50,51,50,50,50,51,50,51,50,51,50,0,0,0,0,0,0,52,52,0,52,52,52,52,52,52,52,0,0,52,52,52,0,52,52,52,52,52,0,0,0,0,53,54,55,53,54,55,0,55,55,55,55,55,55,53,54,55,53,54,55,55,53,54,55,55,53,54,55,53,54,55,53,54,55,0,0,0,0,0,56,57,0,0,0,0,58,59,58,58,60,60,0,60,60,60,60,0,57,0,57,0,0,0,0,61,59,58,59,58,58,59,58,58,58,59,59,58,59,59,58,59,61,58,58,58,58,58,58,58,58,58,59,58,58,58,58,58,58,58,61,58,58,58,58,58,58,61,0,56,58,61,0,0,62,60,62,56,0,57,0,0,61,57,0,57,57,0,63,63,64,65,66,63,67,64,68,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,67,57,72,66,73,67,57,74,70,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,64,63,73,73,71,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,63,63,74,65,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,65,65,72,74,69,57,58,61,59,64,64,70,56,60,71,68,62,66,65,72,73,63,63,63,63,63,63,74,69,69,69,57,57,57,58,58,61,61,59,59,64,70,56,60,60,71,68,62,66,65,72,72,73,63,63,63,74,66,73,73,66,66,66,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,71,57,72,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,70,67,67,69,71,74,74,74,70,63,63,69,68,66,72,69,57,64,70,56,60,71,68,62,66,65,72,73,63,74,64,63,66,73,63,66,69,64,63,57,57,74,73,70,73,63,63,70,72,66,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,63,63,74,63,63,67,67,67,69,73,63,63,67,65,57,70,57,63,70,70,66,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,64,63,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,69,57,58,61,59,64,70,56,60,71,68,62,66,65,72,73,63,74,67,64,75,75,76,77,77,78,76,78,79,80,81,82,83,81,83,79,80,83,80,82,81,84,85,86,87,85,84,86,87,0,0,88,88,88,88,89,89,0,89,89,89,89,88,0,0,0,90,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,91,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,90,0,0,88,0,91,88,88,0,0,89,0,88,88,0,88,0,92,93,93,94,95,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,98,97,93,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,98,104,104,100,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,102,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,102,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,98,93,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,102,96,96,96,101,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,100,99,102,104,92,100,99,101,94,96,98,92,95,93,103,92,96,94,97,98,90,99,100,101,95,93,102,103,104,92,92,93,104,92,92,92,104,94,104,104,97,99,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,94,104,102,97,98,93,92,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,96,88,94,97,98,89,90,99,100,101,91,95,93,102,103,104,92,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,0,107,107,107,106,0,0,0,0,106,108,108,109,108,110,107,106,109,108,110,107,106,108,110,107,106,108,110,107,106,108,110,107,106,109,109,108,108,108,110,107,106,109,108,110,107,106,108,110,107,106,108,108,110,110,107,106,109,108,110,107,106,109,108,110,107,106,109,108,110,107,106,110,110,110,108,108,110,106,108,110,110,110,108,108,108,110,107,106,0,108,110,107,106,110,110,109,108,108,110,108,108,108,110,107,106,108,110,109,108,110,107,106,109,108,110,107,106,109,108,110,107,106,108,0,0,0,0],"f":[null,null,null,null,null,[[["binoptype",4]],[["result",4],["error",3]]],null,[[]],[[]],[[]],[[]],[[],["bytesize",3]],[[["bytesize",3],["castoptype",4]],[["result",4],["error",3]]],null,[[],["analysisresults",3]],[[]],[[["value",4]],["pointerinference",3]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[],[["vec",3],["cwemodule",3]]],null,[[]],[[]],[[["bytesize",3]]],[[["bytesize",3]]],null,[[["project",3],["runtimememoryimage",3],["graph",6]],["analysisresults",3]],null,null,null,null,null,[[["option",4],["pointerinference",3]],["analysisresults",3]],[[],["option",4]],[[],[["error",3],["result",4]]],[[],["option",4]],[[["bytesize",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["unoptype",4]],[["result",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["bitvector",6]]],[[["interval",3]],["interval",3]],[[]],[[]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["abstractidentifier",3]]],[[],["pointerdomain",3]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3]]],[[]],[[]],[[["u64",15]],[["result",4],["error",3]]],[[["binoptype",4]]],[[["binoptype",4]]],[[["binoptype",4]]],[[["binoptype",4]]],[[["binoptype",4]],["bytesize",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytesize",3]],[[],["bytesize",3]],[[],["bytesize",3]],[[],["bytesize",3]],[[],["bytesize",3]],[[],["bytesize",3]],[[["bytesize",3],["castoptype",4]]],[[["bytesize",3],["castoptype",4]]],[[["bytesize",3],["castoptype",4]]],[[["bytesize",3],["castoptype",4]]],[[["i64",15],["bytesize",3]]],[[]],[[],["bitvectordomain",4]],[[],["abstractidentifier",3]],[[],["abstractidentifierdata",3]],[[],["abstractlocation",4]],[[],["abstractmemorylocation",4]],[[],["pointerdomain",3]],[[],["datadomain",4]],[[],["memregion",3]],[[],["memregiondata",3]],[[],["interval",3]],[[],["intervaldomain",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["abstractidentifier",3]],["ordering",4]],[[["abstractidentifierdata",3]],["ordering",4]],[[["abstractlocation",4]],["ordering",4]],[[["abstractmemorylocation",4]],["ordering",4]],[[["bitvector",6]],["bool",15]],[[]],[[]],[[],["memregiondata",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["btreemap",3]],[[["bitvectordomain",4]],["bool",15]],[[["abstractidentifier",3]],["bool",15]],[[["abstractidentifierdata",3]],["bool",15]],[[["abstractlocation",4]],["bool",15]],[[["abstractmemorylocation",4]],["bool",15]],[[["pointerdomain",3]],["bool",15]],[[["datadomain",4]],["bool",15]],[[["memregion",3]],["bool",15]],[[["memregiondata",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["intervaldomain",3]],["bool",15]],[[["intervaldomain",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["bytesize",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bitvector",6]],["bitvectordomain",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bitvector",6]]],[[["pointerdomain",3]]],[[]],[[]],[[]],[[["bitvector",6]]],[[]],[[["bitvector",6]]],[[["interval",3]],["intervaldomain",3]],[[]],[[["variable",3]],[["abstractlocation",4],["error",3],["result",4]]],[[["bitvector",6],["bytesize",3]]],[[],["bytesize",3]],[[["bitvector",6]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["keys",3],["abstractidentifier",3]]],[[["i64",15]]],[[]],[[],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["iter",3],["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[["memregiondata",3]],["memregiondata",3]],[[["intervaldomain",3]],["intervaldomain",3]],[[["bitvectordomain",4]],["bool",15]],[[["abstractidentifier",3]],["bool",15]],[[["abstractidentifierdata",3]],["bool",15]],[[["abstractlocation",4]],["bool",15]],[[["abstractmemorylocation",4]],["bool",15]],[[["pointerdomain",3]],["bool",15]],[[["datadomain",4]],["bool",15]],[[["memregion",3]],["bool",15]],[[["memregiondata",3]],["bool",15]],[[["interval",3]],["bool",15]],[[["intervaldomain",3]],["bool",15]],[[]],[[]],[[["tid",3],["abstractlocation",4]],["abstractidentifier",3]],[[["abstractidentifier",3]],["pointerdomain",3]],[[["bytesize",3]]],[[["bytesize",3]],["memregiondata",3]],[[["bitvector",6],["u64",15]],["interval",3]],[[["bitvector",6]]],[[["bytesize",3]]],[[["bytesize",3]],["bitvectordomain",4]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]],["interval",3]],[[["bytesize",3]]],[[["abstractidentifier",3]],[["option",4],["ordering",4]]],[[["abstractidentifierdata",3]],[["option",4],["ordering",4]]],[[["abstractlocation",4]],[["option",4],["ordering",4]]],[[["abstractmemorylocation",4]],[["option",4],["ordering",4]]],[[["interval",3]]],[[],[["abstractidentifier",3],["btreeset",3]]],[[["bitvector",6]]],[[["btreeset",3]]],[[["abstractidentifier",3]]],[[["abstractidentifier",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["bytesize",3]]],[[["interval",3]],[["interval",3],["error",3],["result",4]]],[[["interval",3]],["interval",3]],[[["intervaldomain",3]],["intervaldomain",3]],[[["intervaldomain",3]],["intervaldomain",3]],[[["interval",3]],["interval",3]],[[]],null,null,[[]],[[]],[[["interval",3]],["interval",3]],[[]],[[]],[[],["pointerdomain",3]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]]],[[["bytesize",3]]],[[],["btreemap",3]],[[],["value",4]],[[],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[],["bitvectordomain",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["bitvector",6],["error",3],["result",4]]],[[],[["bitvector",6],["error",3],["result",4]]],[[],[["bitvector",6],["error",3],["result",4]]],[[],[["bitvector",6],["error",3],["result",4]]],[[],[["interval",3],["error",3],["result",4]]],[[],[["interval",3],["error",3],["result",4]]],[[],[["interval",3],["error",3],["result",4]]],[[],[["interval",3],["error",3],["result",4]]],[[],[["i64",15],["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["unoptype",4]]],[[["unoptype",4]]],[[["unoptype",4]]],[[["unoptype",4]]],[[],["option",4]],[[["option",4]]],[[["option",4]]],[[],[["values",3],["i64",15]]],[[],[["valuesmut",3],["i64",15]]],[[["abstractidentifier",3],["btreemap",3]],["pointerdomain",3]],[[["bytesize",3]],["interval",3]],[[["bytesize",3]],["intervaldomain",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["option",4],["context",8]],[["computation",3],["generalizedcontext",3]]],[[]],[[]],[[],["graph",6]],[[],["graph",6]],[[]],[[]],[[]],[[]],[[["bool",15],["expression",4]],["option",4]],[[],["option",4]],[[["term",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["term",3]],["option",4]],[[["term",3],["option",4],["term",3]],["option",4]],[[["term",3]],["option",4]],[[["edgeindex",3]],["option",4]],[[["term",3],["option",4],["term",3]],["option",4]],[[["project",3]],[["tid",3],["hashmap",3],["hashset",3]]],[[["project",3]]],null,null,null,null,null,[[]],[[]],[[]],[[["u64",15]]],[[]],[[]],[[],["digraph",6]],[[],["digraph",6]],[[["nodeindex",3]],["option",4]],[[],[["vec",3],["nodeindex",3]]],[[],["bool",15]],[[]],[[]],[[["option",4]]],[[],["fnvhashmap",6]],[[["nodeindex",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["edgeindex",3]],["option",4]],null,null,null,[[]],[[]],[[["option",4],["context",8]],[["generalizedcontext",3],["computation",3]]],[[]],[[]],[[],["graph",6]],[[],["graph",6]],[[]],[[]],[[]],[[]],[[["bool",15],["expression",4],["term",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["node",4],["term",3]],["option",4]],[[["term",3]],["option",4]],[[["term",3]],["option",4]],[[["edgeindex",3]],["option",4]],[[["term",3],["option",4],["term",3]],["option",4]],[[["option",4],["term",3]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["node",4]],[[],["edge",4]],[[]],[[]],[[["node",4]],["bool",15]],[[["edge",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["term",3]],[[["term",3],["tid",3],["hashset",3]],["graph",6]],[[],["term",3]],[[]],[[]],[[]],[[]],[[["node",4]],["bool",15]],[[["edge",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[["nodevalue",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[["option",4]],[["clone",8],["option",4]]],[[["nodevalue",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[["abstractidentifier",3],["btreeset",3]],[["abstractidentifier",3],["btreeset",3]]],[[["abstractidentifier",3],["btreeset",3]],[["abstractidentifier",3],["btreeset",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[["variable",3],["externsymbol",3],["runtimememoryimage",3]],[["result",4],["error",3]]],[[],["state",3]],[[],["config",3]],[[]],[[]],null,[[]],[[["project",3]]],[[["def",4]],["bool",15]],[[["def",4],["runtimememoryimage",3]],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[["state",3]],["bool",15]],[[["config",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["expression",4]],["data",6]],[[["variable",3],["arg",4],["runtimememoryimage",3]],[["result",4],["data",6],["error",3]]],[[["analysisresults",3],["value",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["value",4]],[[],["context",3]],[[],["graph",6]],[[["nodeindex",3]],[["option",4],["nodevalue",4]]],[[["variable",3]],["data",6]],[[["str",15]],[["data",6],["option",4]]],[[["variable",3],["expression",4],["runtimememoryimage",3]],[["result",4],["error",3]]],[[["variable",3],["expression",4]]],[[["expression",4],["runtimememoryimage",3]],[["result",4],["error",3]]],[[]],null,[[]],[[]],[[]],[[["data",6]],["bool",15]],[[],["bool",15]],[[["runtimememoryimage",3],["expression",4],["bytesize",3]],[["result",4],["data",6],["error",3]]],[[["pointerdomain",3]],[["vec",3],["result",4]]],null,[[]],[[["abstractidentifier",3],["valuedomain",6]]],[[["state",3]],["bool",15]],[[["config",3]],["bool",15]],[[["sender",3],["logthreadmsg",4],["graph",6],["runtimememoryimage",3],["project",3],["config",3]],["pointerinference",3]],[[["variable",3],["tid",3]],["state",3]],null,[[["data",6],["runtimememoryimage",3]],["bool",15]],[[]],[[]],[[["state",3]]],[[["callingconvention",3]]],[[["abstractidentifier",3]]],[[]],[[]],[[["abstractidentifier",3],["valuedomain",6]]],[[["callingconvention",3],["variable",3],["state",3]]],[[["bool",15],["graph",6],["runtimememoryimage",3],["project",3],["config",3]],["pointerinference",3]],[[],["result",4]],[[],["result",4]],[[["variable",3],["data",6]]],[[["data",6],["expression",4]],[["result",4],["error",3]]],null,[[["data",6],["runtimememoryimage",3]],[["result",4],["error",3]]],[[],["value",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["runtimememoryimage",3],["expression",4],["data",6]],[["result",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,[[["bytesize",3],["valuedomain",6]],["bool",15]],[[["btreeset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["abstractobject",3]],[[],["abstractobjectinfo",3]],[[],["objecttype",4]],[[],["objectstate",4]],[[]],[[]],[[]],[[]],[[["objecttype",4]],["ordering",4]],[[["objectstate",4]],["ordering",4]],[[]],[[],["abstractobjectinfo",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["abstractobject",3]],["bool",15]],[[["abstractobjectinfo",3]],["bool",15]],[[["objecttype",4]],["bool",15]],[[["objectstate",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["option",4],["objecttype",4]]],[[],["btreeset",3]],[[],[["abstractidentifier",3],["btreeset",3]]],[[],["objectstate",4]],[[["bitvector",6],["bytesize",3]],["data",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[]],[[]],[[]],[[["data",6],["valuedomain",6]]],[[["abstractobject",3]],["bool",15]],[[["abstractobjectinfo",3]],["bool",15]],[[["objecttype",4],["bytesize",3]],["abstractobject",3]],[[["objecttype",4],["bytesize",3]],["abstractobjectinfo",3]],[[["objecttype",4]],[["option",4],["ordering",4]]],[[["objectstate",4]],[["option",4],["ordering",4]]],[[["btreeset",3]]],[[["abstractidentifier",3],["valuedomain",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bitvectordomain",4]]],[[["objectstate",4]]],[[["bitvectordomain",4]]],[[["data",6],["valuedomain",6]],[["result",4],["error",3]]],[[],["value",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[],["stringlocation",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["config",3]],["bool",15]],[[["stringlocation",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["analysisresults",3],["value",4]]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["analysisresults",3],["value",4]]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[["binoptype",4]]],[[]],[[]],[[]],[[]],[[],["bytesize",3]],[[["bytesize",3],["castoptype",4]]],[[["analysisresults",3],["value",4]]],[[],["taint",4]],[[],["config",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["taint",4]],["bool",15]],[[["config",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["taint",4]],["bool",15]],[[["config",3]],["bool",15]],[[["bytesize",3]]],[[],["result",4]],[[],["result",4]],[[["bytesize",3]]],[[]],[[]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["unoptype",4]]],null,null,null,[[["analysisresults",3],["value",4]]],null,null,[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["vec",3]],[["vec",3],["cwewarning",3]]],[[],["vec",3]],[[]],[[]],[[["config",3]],["bool",15]],[[],[["vec",3],["externsymbol",3]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["analysisresults",3],["value",4]]],[[],["config",3]],[[]],[[],["result",4]],[[["config",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["config",3]],["bool",15]],[[["config",3],["project",3]]],[[["analysisresults",3]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["analysisresults",3],["value",4]]],[[],[["vec",3],["cwewarning",3]]],[[["hashmap",3],["term",3]],[["vec",3],["cwewarning",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bytesize",3]],["bytesize",3]],[[["bytesize",3]]],null,null,null,[[],["usize",15]],[[["binoptype",4]],[["result",4],["error",3]]],[[["str",15]],["tid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytesize",3]],[[],["bytesize",3]],null,null,null,[[["bytesize",3],["castoptype",4]],[["result",4],["error",3]]],[[["option",4],["variable",3],["option",4],["term",3],["hashmap",3]],[["tid",3],["option",4]]],null,[[["string",3]],[["tid",3],["option",4]]],[[],["variable",3]],[[],["expression",4]],[[],["binoptype",4]],[[],["castoptype",4]],[[],["unoptype",4]],[[],["tid",3]],[[],["term",3]],[[],["def",4]],[[],["jmp",4]],[[],["blk",3]],[[],["sub",3]],[[],["arg",4]],[[],["externsymbol",3]],[[],["program",3]],[[],["callingconvention",3]],[[],["project",3]],[[],["bytesize",3]],[[],["datatypeproperties",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["variable",3]],["ordering",4]],[[["tid",3]],["ordering",4]],[[["bytesize",3]],["ordering",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bytesize",3]],[[]],null,null,[[["variable",3]],["bool",15]],[[["expression",4]],["bool",15]],[[["binoptype",4]],["bool",15]],[[["castoptype",4]],["bool",15]],[[["unoptype",4]],["bool",15]],[[["tid",3]],["bool",15]],[[["term",3]],["bool",15]],[[["def",4]],["bool",15]],[[["jmp",4]],["bool",15]],[[["blk",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["arg",4]],["bool",15]],[[["externsymbol",3]],["bool",15]],[[["program",3]],["bool",15]],[[["callingconvention",3]],["bool",15]],[[["project",3]],["bool",15]],[[["bytesize",3]],["bool",15]],[[["datatypeproperties",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["tid",3]],[["option",4],["term",3]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["variable",3]],["irvariable",3]],[[["registerproperties",3]],["irvariable",3]],[[]],[[["variable",3]],["irexpression",4]],[[]],[[["expression",3]],["irexpression",4]],[[]],[[["expressiontype",4]],["irbinoptype",4]],[[]],[[["expressiontype",4]],["ircastoptype",4]],[[["expressiontype",4]],["irunoptype",4]],[[]],[[]],[[]],[[]],[[["jmp",3]],["irjmp",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["callingconvention",3]],["ircallingconvention",3]],[[]],[[]],[[["u64",15]],["bytesize",3]],[[["bitwidth",3]],["bytesize",3]],[[]],[[["project",3]],["callingconvention",3]],[[],["bytesize",3]],[[],[["callingconvention",3],["option",4]]],[[],[["result",4],["arg",4],["error",3]]],[[],[["variable",3],["error",3],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],[["variable",3],["vec",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bytesize",3]],[["term",3],["irsub",3]]],[[["bytesize",3]]],[[["bytesize",3]]],null,null,null,null,null,[[]],[[],["bytesize",3]],[[]],null,null,null,null,[[["variable",3]],["bool",15]],[[["expression",4]],["bool",15]],[[["tid",3]],["bool",15]],[[["term",3]],["bool",15]],[[["def",4]],["bool",15]],[[["jmp",4]],["bool",15]],[[["blk",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["arg",4]],["bool",15]],[[["externsymbol",3]],["bool",15]],[[["program",3]],["bool",15]],[[["callingconvention",3]],["bool",15]],[[["project",3]],["bool",15]],[[["bytesize",3]],["bool",15]],[[["datatypeproperties",3]],["bool",15]],[[["tostring",8]],["tid",3]],[[["u64",15]],["bytesize",3]],null,[[],[["vec",3],["logmessage",3]]],[[],["bytesize",3]],null,[[["variable",3]],[["option",4],["ordering",4]]],[[["tid",3]],[["option",4],["ordering",4]]],[[["bytesize",3]],[["option",4],["ordering",4]]],[[["expression",4]],["expression",4]],[[["i64",15]],["expression",4]],null,null,[[]],null,[[],["bytesize",3]],[[]],[[["hashset",3]],[["result",4],["vec",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bytesize",3]],[[]],null,[[],["bytesize",3]],[[]],[[],["option",4]],[[],[["error",3],["result",4]]],[[],["option",4]],null,null,[[["bytesize",3]],["bytesize",3]],[[["bytesize",3]]],[[["bytesize",3]]],null,[[["variable",3],["expression",4]]],[[["variable",3],["expression",4]]],[[]],[[["iterator",8]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["unoptype",4]],[["result",4],["error",3]]],[[["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["variable",3]],[[],["expression",3]],[[],["expressiontype",4]],[[],["registerproperties",3]],[[],["call",3]],[[],["jmp",3]],[[],["jmptype",4]],[[],["label",4]],[[],["def",3]],[[],["blk",3]],[[],["arg",3]],[[],["argintent",4]],[[],["sub",3]],[[],["externsymbol",3]],[[],["program",3]],[[],["callingconvention",3]],[[],["project",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["variable",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["expressiontype",4]],["bool",15]],[[["registerproperties",3]],["bool",15]],[[["call",3]],["bool",15]],[[["jmp",3]],["bool",15]],[[["jmptype",4]],["bool",15]],[[["label",4]],["bool",15]],[[["def",3]],["bool",15]],[[["blk",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["argintent",4]],["bool",15]],[[["sub",3]],["bool",15]],[[["externsymbol",3]],["bool",15]],[[["program",3]],["bool",15]],[[["callingconvention",3]],["bool",15]],[[["project",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bytesize",3]],["irblk",3]],[[["bytesize",3]],["irdef",4]],[[["str",15],["u64",15],["variable",3]],["irprogram",3]],[[["u64",15]],["irproject",3]],null,null,null,null,null,null,null,null,null,null,null,[[["variable",3]],["bool",15]],[[["expression",3]],["bool",15]],[[["registerproperties",3]],["bool",15]],[[["call",3]],["bool",15]],[[["jmp",3]],["bool",15]],[[["label",4]],["bool",15]],[[["def",3]],["bool",15]],[[["blk",3]],["bool",15]],[[["arg",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["externsymbol",3]],["bool",15]],[[["program",3]],["bool",15]],[[["callingconvention",3]],["bool",15]],[[["project",3]],["bool",15]],[[["bytesize",3]],["variable",3]],[[["bytesize",3]],["variable",3]],null,[[],[["vec",3],["logmessage",3]]],[[["bytesize",3]],["bitvector",6]],[[],["bitvector",6]],[[],["bytesize",3]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[["bytesize",3]],["def",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],[["result",4],["u64",15],["error",3]]],[[["str",15]],["pathbuf",3]],null,null,[[["str",15]],["value",4]],null,[[["callingconvention",3],["project",3],["usize",15],["vec",3]],[["arg",4],["vec",3]]],[[["bytesize",3],["string",3]],["arg",4]],[[["i64",15],["bytesize",3]],["arg",4]],[[["variable",3],["pointerinferencestate",3],["externsymbol",3],["usize",15],["runtimememoryimage",3]],[["result",4],["error",3],["string",3]]],[[["externsymbol",3]],[["string",3],["vec",3]]],[[["runtimememoryimage",3],["pointerinferencestate",3],["project",3],["externsymbol",3],["hashmap",3]],[["result",4],["vec",3],["error",3]]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["datatypeproperties",3],["string",3]],["bytesize",3]],[[["intervaldomain",3],["runtimememoryimage",3]],[["result",4],["error",3],["string",3]]],[[["datatypeproperties",3],["str",15]],["vec",3]],null,[[["u64",15]]],[[]],[[]],[[],["runtimememoryimage",3]],[[]],[[],["result",4]],[[["runtimememoryimage",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["bitvector",6]],[["error",3],["result",4]]],[[]],[[]],[[["bitvector",6]],[["bool",15],["result",4],["error",3]]],[[["bitvector",6]],["bool",15]],[[["u64",15]],[["bool",15],["result",4],["error",3]]],[[["u64",15]],[["bool",15],["result",4],["error",3]]],[[],["bool",15]],[[["runtimememoryimage",3]],["bool",15]],[[],[["result",4],["error",3]]],[[["bytesize",3],["bitvector",6]],[["option",4],["result",4],["error",3]]],[[["bitvector",6]],[["result",4],["error",3],["str",15]]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["nodeindex",3],["tid",3],["graph",6]],[["tid",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,[[["vec",3],["string",3]],["cwewarning",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cwewarning",3]],[[],["logmessage",3]],[[],["loglevel",4]],[[],["logthreadmsg",4]],[[]],[[]],[[]],[[]],[[["cwewarning",3]],["ordering",4]],[[["logmessage",3]],["ordering",4]],[[["loglevel",4]],["ordering",4]],[[["logthreadmsg",4]],["ordering",4]],[[]],[[],[["sender",3],["logthreadmsg",4]]],[[],["cwewarning",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["cwewarning",3]],["bool",15]],[[["logmessage",3]],["bool",15]],[[["loglevel",4]],["bool",15]],[[["logthreadmsg",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],[["sender",3],["logthreadmsg",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["tid",3]],["logmessage",3]],null,null,[[["cwewarning",3]],["bool",15]],[[["logmessage",3]],["bool",15]],[[["logthreadmsg",4]],["bool",15]],[[],["cwewarning",3]],[[],["logmessage",3]],[[],["logmessage",3]],[[],["logmessage",3]],[[["vec",3],["vec",3]],["cwewarning",3]],null,[[["cwewarning",3]],[["option",4],["ordering",4]]],[[["logmessage",3]],[["option",4],["ordering",4]]],[[["loglevel",4]],[["option",4],["ordering",4]]],[[["logthreadmsg",4]],[["option",4],["ordering",4]]],[[["logmessage",3],["cwewarning",3],["str",15],["option",4],["vec",3],["vec",3],["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["logmessage",3]],null,[[],["logthread",3]],[[["vec",3],["string",3]],["cwewarning",3]],null,null,[[["vec",3],["string",3]],["cwewarning",3]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["str",15],["term",3]],["option",4]],[[["term",3],["hashmap",3]],["vec",3]],[[["term",3],["hashmap",3]],["vec",3]],[[["project",3]],[["tid",3],["externsymbol",3],["hashmap",3]]]],"p":[[6,"Bitvector"],[3,"AnalysisResults"],[3,"CweModule"],[4,"AbstractMemoryLocation"],[4,"AbstractLocation"],[4,"DataDomain"],[4,"BitvectorDomain"],[3,"MemRegionData"],[3,"Interval"],[3,"IntervalDomain"],[8,"SpecializeByConditional"],[3,"PointerDomain"],[8,"RegisterDomain"],[3,"AbstractIdentifier"],[3,"AbstractIdentifierData"],[3,"MemRegion"],[8,"SizedDomain"],[8,"AbstractDomain"],[8,"HasTop"],[8,"TryToBitvec"],[8,"TryToInterval"],[13,"Location"],[13,"Pointer"],[8,"Context"],[3,"GeneralizedContext"],[8,"Context"],[3,"Computation"],[8,"Context"],[3,"GeneralizedContext"],[4,"Node"],[4,"Edge"],[13,"CallReturn"],[13,"CallSource"],[4,"NodeValue"],[13,"CallFlowCombinator"],[3,"State"],[3,"Config"],[3,"PointerInference"],[4,"ObjectState"],[4,"ObjectType"],[3,"AbstractObjectInfo"],[3,"AbstractObject"],[4,"StringLocation"],[3,"Config"],[3,"Config"],[3,"Config"],[3,"Config"],[3,"Config"],[3,"Config"],[4,"Taint"],[3,"Config"],[3,"Config"],[3,"SymbolMaps"],[3,"BlockMaps"],[3,"Config"],[4,"Def"],[4,"Expression"],[4,"BinOpType"],[4,"UnOpType"],[4,"Jmp"],[4,"CastOpType"],[4,"Arg"],[3,"ByteSize"],[3,"Tid"],[3,"Program"],[3,"ExternSymbol"],[8,"BitvectorExtended"],[3,"Sub"],[3,"Variable"],[3,"Term"],[3,"Blk"],[3,"CallingConvention"],[3,"Project"],[3,"DatatypeProperties"],[13,"Stack"],[13,"Load"],[13,"Store"],[13,"Assign"],[13,"UnOp"],[13,"Cast"],[13,"Subpiece"],[13,"Unknown"],[13,"BinOp"],[13,"CBranch"],[13,"CallOther"],[13,"Call"],[13,"CallInd"],[4,"ExpressionType"],[4,"JmpType"],[4,"Label"],[4,"ArgIntent"],[3,"Variable"],[3,"ExternSymbol"],[3,"RegisterProperties"],[3,"Sub"],[3,"Expression"],[3,"Call"],[3,"Jmp"],[3,"Def"],[3,"Blk"],[3,"Arg"],[3,"Program"],[3,"CallingConvention"],[3,"Project"],[3,"RuntimeMemoryImage"],[4,"LogThreadMsg"],[4,"LogLevel"],[3,"CweWarning"],[3,"LogThread"],[3,"LogMessage"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};